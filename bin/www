#!/usr/bin/env node
// ↑ Шебанг: на Unix-подобных системах позволяет запускать файл как команду.
//   На Windows не обязателен, но оставим — не мешает.

// ──────────────────────────────────────────────────────────────
// Простой учебный лаунчер HTTP-сервера.
// Делает 3 вещи:
//   1) читает PORT из .env,
//   2) создаёт HTTP-сервер на базе нашего Express-приложения,
//   3) запускает прослушивание порта и красиво логирует адрес.
// ──────────────────────────────────────────────────────────────

require('dotenv').config();   // Подтягиваем переменные из .env (например, PORT=3000)

const http = require('http'); // Нативный HTTP-модуль Node.js
const app = require('../app'); // Наше Express-приложение (см. app.js)

// 1) Определяем порт. Если PORT не задан — по умолчанию 3000.
const port = parseInt(process.env.PORT, 10) || 3000;
app.set('port', port); // Не обязательно, но удобно: сохраняем порт в настройках Express

// 2) Создаём HTTP-сервер и передаём ему Express-приложение как обработчик запросов.
const server = http.createServer(app);

// 3) Запускаем прослушивание порта.
//    Когда сервер успешно стартует — выводим дружелюбный лог с адресом.
server.listen(port, () => {
    // HOST обычно не нужен. По умолчанию слушаем на 0.0.0.0 (все интерфейсы),
    // но для красивого лога выведем 'localhost', если HOST не задан.
    const host = process.env.HOST || 'localhost';
    console.log(`🚀 Server listening on http://${host}:${port}`);
    // Подсказка: если используешь nodemon, можно набрать 'rs' в консоли, чтобы перезапустить процесс.
});

// Минимальный обработчик ошибок запуска (самые частые кейсы).
server.on('error', (err) => {
    // EACCES — не хватает прав (например, порт < 1024 на Unix требует sudo/админа)
    if (err.code === 'EACCES') {
        console.error(`Port ${port} requires elevated privileges`);
        process.exit(1);
    }
    // EADDRINUSE — порт уже занят другой программой
    if (err.code === 'EADDRINUSE') {
        console.error(`Port ${port} is already in use`);
        process.exit(1);
    }
    // Любая другая ошибка — выведем и завершим процесс.
    console.error(err);
    process.exit(1);
});
